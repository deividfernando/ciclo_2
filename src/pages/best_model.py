import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image

def show_best_model():
    """
    Renderiza a p√°gina do melhor modelo.
    """
    # Cabe√ßalho
    st.title("üèÜ Melhor Modelo - LightGBM")
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="Acur√°cia",
            value="86.51%",
            delta="Melhor performance"
        )
    
    with col2:
        st.metric(
            label="F1-Score",
            value="88%",
            delta="Classe majorit√°ria"
        )
    
    with col3:
        st.metric(
            label="Precis√£o M√©dia",
            value="74%",
            delta="Macro avg"
        )
    
    with col4:
        st.metric(
            label="AUC-ROC",
            value="79%",
            delta="Boa separa√ß√£o"
        )

    # Detalhes do modelo
    st.markdown("""
    ### üìä Detalhes do Modelo
    
    **Modelo**: LightGBM com estrat√©gia de an√°lise de colunas
    
    **Pontua√ß√£o m√©dia**: 0.7742
    
    **M√©tricas por classe**:
    - Classe 0 (Minorit√°ria):
        - Precis√£o: 57.47%
        - Recall: 21%
    - Classe 1 (Majorit√°ria):
        - Precis√£o: 88.28%
        - Recall: 97%
    """)

    # Matriz de Confus√£o e Curva ROC
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Matrix de Confus√£o")
        # Carregar e exibir a imagem da curva ROC
        confusion_matrix = Image.open('assets/confusion_matrix.png')
        st.image(confusion_matrix, caption='Matrix de Confus√£o')

    with col2:
        st.markdown("### Curva ROC")
        # Carregar e exibir a imagem da curva ROC
        roc_curve = Image.open('assets/roc_curve.png')
        st.image(roc_curve, caption='Curva ROC - AUC: 0.79')

        # Feature Importance
    st.markdown("""
    ### üéØ Features Mais Importantes
    
    As 6 features que mais impactaram nas decis√µes do modelo:
    
    1. **Feature 0**: Principal indicador com maior peso nas decis√µes
    2. **Feature 22**: Segundo indicador mais relevante
    3. **Feature 19**: Terceiro fator mais importante
    4. **Feature 8**: Quarto indicador em relev√¢ncia
    5. **Feature 34**: Quinta feature mais impactante
    6. **Feature 49**: Sexta feature em import√¢ncia
    
    > Estas features foram identificadas atrav√©s da an√°lise SHAP (SHapley Additive exPlanations), que mede a contribui√ß√£o de cada vari√°vel para as previs√µes do modelo.
    """)

    # Visualiza√ß√£o das Features
    feature_importance = pd.DataFrame({
        'Feature': ['0', '22', '19', '8', '34', '49'],
        'Import√¢ncia': [100, 85, 78, 72, 65, 58]  # Valores normalizados para visualiza√ß√£o
    })

    # Criar gr√°fico de barras horizontal
    fig, ax = plt.subplots(figsize=(10, 4))
    bars = ax.barh(feature_importance['Feature'], feature_importance['Import√¢ncia'], 
                  color='skyblue')
    
    # Personalizar o gr√°fico
    ax.set_xlabel('Import√¢ncia Relativa (%)')
    ax.set_title('Top 6 Features Mais Importantes')
    
    # Adicionar valores nas barras
    for bar in bars:
        width = bar.get_width()
        ax.text(width, bar.get_y() + bar.get_height()/2, 
                f'{int(width)}%', 
                ha='left', va='center', fontweight='bold')
    
    st.pyplot(fig)

    # Resultados gerais
    st.markdown("""
    ### üìà Resultados Gerais
    
    **Total de amostras**: 10,746
    - Acertos: 8,621 (80.23%)
    - Erros: 2,125 (19.77%)
    
    ### üí° Insights Principais
    
    1. **Performance Geral**:
       - O modelo alcan√ßou uma acur√°cia de 86.51%
       - AUC-ROC de 0.79 indica boa capacidade de discrimina√ß√£o
    
    2. **Desbalanceamento de Classes**:
       - Melhor performance na classe majorit√°ria (1)
       - Oportunidade de melhoria na classe minorit√°ria (0)
    
    3. **Trade-offs**:
       - Alto recall na classe majorit√°ria (97%)
       - Precis√£o moderada na classe minorit√°ria (57.47%)
    
    ### üîç Recomenda√ß√µes
    
    1. **Otimiza√ß√£o**:
       - Investigar t√©cnicas adicionais de balanceamento
       - Ajuste fino de hiperpar√¢metros focando na classe minorit√°ria
    
    2. **Monitoramento**:
       - Acompanhar especialmente os falsos negativos
       - Validar performance em diferentes cen√°rios
    
    3. **Pr√≥ximos Passos**:
       - Avaliar custo-benef√≠cio entre precis√£o e recall
       - Considerar ensemble com outros modelos
    """)

    # Footer
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 20px;'>
        <small>
            An√°lise realizada pela equipe AlphaEdTech<br>
            √öltima atualiza√ß√£o: Outubro 2024
        </small>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    show_best_model()